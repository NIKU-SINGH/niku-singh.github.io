<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Building: Recollect</title>
      <link href="/2025/03/03/Building-Recollect/"/>
      <url>/2025/03/03/Building-Recollect/</url>
      
        <content type="html"><![CDATA[<p>Hi everyone my Name is Niku Singh, so this is going to be the first blog in the series about building recollect.</p><h1 id="What-is-recollect"><a href="#What-is-recollect" class="headerlink" title="What is recollect?"></a>What is recollect?</h1><p>Recollect is a smart centralized bookmarking hub that organizes, categorizes, and enhances your saved content for seamless access and discovery. A more detailed description can be found in my <a href="https://www.figma.com/slides/E3n9v2zEsnnGMUdMZvIL5K/Recollect-Template-1?node-id=11-111&t=b4U4Uyw5HfqooxxQ-1">Figma Deck</a><br><img src="/images/Recollect/overview.png" alt="Recollect"></p><h1 id="Motivation-behind-the-idea"><a href="#Motivation-behind-the-idea" class="headerlink" title="Motivation behind the idea"></a>Motivation behind the idea</h1><p>The main reason why I am building is that because I felt the need for it.</p><p>I often save posts, links, and websites with the intention of revisiting them later, only to forget where I saved them. The same goes for marking videos as ‚ÄúWatch Later‚Äù and bookmarking posts‚Äîmost of them just end up untouched.</p><p>Often these saved contents have some sort of connection between them</p><p>Like i have saved ai related resources on Twitter, reddit, linkedin posts and YouTube.</p><p>And when I need to find those saved resources, I have to search through bookmarks on each platform individually‚Äîonly to realize how difficult it is to track them down.</p><p>I have been tinkering on this idea for a while now, I have researched over internet talked to friends.<br>Seems like this problem is genuine and there are some notable companies already working on this idea.<br>Some of them are really good like</p><ol><li><a href="https://mymind.com/">My Mind</a>  </li><li><a href="https://packpack.ai/">Pack Pack AI</a>  </li><li><a href="https://clipmate.ai/">Clipmate AI</a>  </li><li><a href="https://supermemory.ai/">Supermemory AI</a>  </li><li><a href="https://are.na/">Are.na</a></li></ol><p>Some might ask, why reinvent the wheel when so many tools already exist? My answer is simple:</p><ol><li>I want to build it and learn in the process.</li><li>There‚Äôs a unique satisfaction in bringing my own idea to life.</li><li>Existing tools lack certain features that I personally want to create.</li></ol><h1 id="What-I-have-in-Mind"><a href="#What-I-have-in-Mind" class="headerlink" title="What I have in Mind?"></a>What I have in Mind?</h1><p>After working on this project on and off for a long time, I finally built an MVP! üéâ</p><p>It‚Äôs a simple web app with a Chrome extension‚Äîjust click on a post to save it, and it gets stored on our platform. You can also categorize your saved posts and leverage AI-powered search for easy retrieval.</p><p>Working Demo</p><div style="position: relative; padding-bottom: 56.25%; height: 0;"><iframe src="https://www.loom.com/embed/e03d17fe58f843af9fbb77395a2490c1?sid=0547f189-3f7e-4534-aaa7-5fa8ab8fa84e" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"></iframe></div><h1 id="Learnings"><a href="#Learnings" class="headerlink" title="Learnings"></a>Learnings</h1><p>Building this demo was a great learning experience! I got hands-on with Chrome extensions, web scraping, Postgres, and Supabase. I‚Äôll be sharing my insights in upcoming blogs, but overall, it was a fun and rewarding journey.</p><h1 id="Whats-Next"><a href="#Whats-Next" class="headerlink" title="Whats Next"></a>Whats Next</h1><p>My next thing is to</p><ol><li>Make the ui better and launch the product</li><li>Work on integrating it with other platform</li><li>Add auto imports for bookmarks</li><li>Refine the search to give responses better</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> AI, Chrome-Extension, Scrapping,Personal-Project, Recollect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter-1:Database_Systems</title>
      <link href="/2024/10/13/Chapter-1-Database-Systems/"/>
      <url>/2024/10/13/Chapter-1-Database-Systems/</url>
      
        <content type="html"><![CDATA[<p>This blog lists my learning and discussion from the Software Internals Book Club, which I am a part of. The book club is run by Phil Eaton. More on this <a href="https://eatonphil.com/2024-database-design-and-implementation.html">here</a>.</p><p>For this book I would be building my own SimpleDB Implementation in Golang more on that <a href="https://github.com/NIKU-SINGH/simpleDB">here</a></p><p><strong>Chapter 1</strong> talks about the basic properties of databases and the setup of a Simple DB.</p><h3 id="Fundamental-Properties-of-a-Database"><a href="#Fundamental-Properties-of-a-Database" class="headerlink" title="Fundamental Properties of a Database"></a>Fundamental Properties of a Database</h3><ol><li><strong>Persistence</strong>: Databases must be persistent; otherwise, records would disappear when the computer is turned off.</li><li><strong>Sharing</strong>: Databases can be shared by multiple concurrent users.</li><li><strong>Accuracy</strong>: Databases must remain consistent and accurate.</li><li><strong>Usability</strong>: Databases should handle various queries, indexing, searching, and other functions efficiently.</li></ol><h3 id="Record-Storage"><a href="#Record-Storage" class="headerlink" title="Record Storage"></a>Record Storage</h3><ul><li>The simplest way to make a database persistent is by storing records as text files, with one file per record type.</li><li><strong>Problems with this approach</strong>:<ul><li>Large text files take too long to update and read.</li><li>Searching in large text files is inefficient as it requires sequential scans.</li><li>Concurrent writes by multiple threads can lead to data corruption.</li><li>Interoperability between different applications and machines becomes complex.</li><li>A machine crash during an update could lead to inconsistent records.</li><li>Replicating the database for high availability across multiple machines becomes difficult.</li></ul></li></ul><h3 id="Multi-user-Access"><a href="#Multi-user-Access" class="headerlink" title="Multi-user Access"></a>Multi-user Access</h3><ul><li>When databases are shared, multiple concurrent users may try to read or update a record simultaneously, leading to data inconsistencies. Concurrency control through locks ensures that records are locked until the first user completes the task.</li></ul><h3 id="Dealing-with-Catastrophe"><a href="#Dealing-with-Catastrophe" class="headerlink" title="Dealing with Catastrophe"></a>Dealing with Catastrophe</h3><ul><li>Databases should handle crashes effectively. If a crash occurs during an update, the database must revert to a consistent state, ensuring that updates are atomic in nature.</li></ul><h3 id="Memory-Management"><a href="#Memory-Management" class="headerlink" title="Memory Management"></a>Memory Management</h3><p>The author gives an excellent analogy of buying a cookie to explain memory management:</p><ul><li><strong>Kitchen (RAM)</strong>: Quick access (5 seconds).</li><li><strong>Nearby Grocery Store (Flash Drive)</strong>: Slower access (5000 seconds).</li><li><strong>Mail Order (Disk)</strong>: Slowest access (500,000 seconds).</li></ul><p>This analogy highlights the speed differences between memory types, with RAM being the fastest and disk being the slowest.</p><h3 id="Usability"><a href="#Usability" class="headerlink" title="Usability"></a>Usability</h3><ul><li>A database must support query languages and utility functions to extract data effectively. This ensures users don‚Äôt have to implement their own methods for accessing data.</li></ul><h3 id="Simple-DB-Setup"><a href="#Simple-DB-Setup" class="headerlink" title="Simple DB Setup"></a>Simple DB Setup</h3><p>Our club member created a handy <a href="https://gist.github.com/ankithooda/b0d624aec9b3ed2882713d59feba4b11">gist for setting up and running a simple database from the CLI</a> without an IDE.</p><h3 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h3><ol><li><p><strong>Suppose an organization needs to manage a small number of shared records (e.g., 100 records).</strong></p><ol><li>Would it make sense to use a commercial database system for managing these records?<ul><li>No, using a simple solution like Google Sheets, Notion, or Excel would make more sense for small datasets.</li></ul></li><li>What database features would not be required?<ul><li>Features like indexing, query optimization, caching, row-level locking, and concurrency would be unnecessary.</li></ul></li><li>Could a spreadsheet be used to store these records? What are the potential problems?<ul><li>Yes, but problems include lack of advanced features like complex queries and data security, as well as limited data integrity controls.</li></ul></li></ol></li><li><p><strong>Suppose you want to store a large amount of personal data. What database features wouldn‚Äôt you need?</strong></p><ul><li>You wouldn‚Äôt need sharding, real-time analytics, or row-level security if no one else accesses the data. Some features like query optimization might still not be necessary.</li></ul></li><li><p><strong>How large does your data need to be before storing it in a database becomes necessary?</strong></p><ul><li>For personal data, if the dataset grows to over 100,000 records, using a database system would become essential for efficiency.</li><li>Other factors include the need for concurrency control, data security, and backup mechanisms.</li></ul></li><li><p><strong>Comparing a version control system (like Git) to a database system:</strong></p><ol><li>Does a version control system have a concept of a record?<ul><li>Yes, it can treat commits as records.</li></ul></li><li>How does check-in&#x2F;checkout correspond to database concurrency control?<ul><li>It functions similarly to record locks, ensuring no conflicts between changes.</li></ul></li><li>How does a user commit changes and undo uncommitted changes?<ul><li>Users commit changes with the <code>commit</code> command and can undo with <code>reset</code> or <code>revert</code>.</li></ul></li><li>How well does saving updates as difference files satisfy the needs of a database?<ul><li>This strategy mirrors database logging mechanisms that record incremental changes, ensuring that the current state can be recreated.</li></ul></li></ol></li></ol><h3 id="Resources-Shared-from-the-Community"><a href="#Resources-Shared-from-the-Community" class="headerlink" title="Resources Shared from the Community"></a>Resources Shared from the Community</h3><ol><li><p><img src="/images/Database_Design_And_Implementation/Chapter_1/latencies.png" alt="The actual speed of reading from different storage devices"></p></li><li><p><a href="https://cheat.sh/latencies">Latency Cheat Sheet</a><br><img src="/images/Database_Design_And_Implementation/Chapter_1/reads.png" alt="speed_latencies"></p></li><li><p><a href="https://colin-scott.github.io/personal_website/research/interactive_latency.html">Interactive Latency Research</a></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Database, Database-Design-And-Implementation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/10/13/hello-world/"/>
      <url>/2024/10/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
